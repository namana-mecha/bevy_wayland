//! # D-Bus interface proxy for: `org.bluez.Device1`
//!
//! This code was generated by `zbus-xmlgen` `5.1.0` from D-Bus introspection data.
//! Source: `device.xml`.
//!
//! You may prefer to adapt it, instead of using it verbatim.
//!
//! More information can be found in the [Writing a client proxy] section of the zbus
//! documentation.
//!
//! This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
//! following zbus API can be used:
//!
//! * [`zbus::fdo::IntrospectableProxy`]
//! * [`zbus::fdo::PropertiesProxy`]
//!
//! Consequently `zbus-xmlgen` did not generate code for the above interfaces.
//!
//! [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
//! [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use anyhow::Result;
use log::error;
use zbus::proxy;

use super::ProxyError;

#[proxy(interface = "org.bluez.Device1", assume_defaults = true)]
pub trait Device1 {
    /// CancelPairing method
    fn cancel_pairing(&self) -> zbus::Result<()>;

    /// Connect method
    fn connect(&self) -> zbus::Result<()>;

    /// ConnectProfile method
    fn connect_profile(&self, UUID: &str) -> zbus::Result<()>;

    /// Disconnect method
    fn disconnect(&self) -> zbus::Result<()>;

    /// DisconnectProfile method
    fn disconnect_profile(&self, UUID: &str) -> zbus::Result<()>;

    /// Pair method
    fn pair(&self) -> zbus::Result<()>;

    /// Adapter property
    #[zbus(property)]
    fn adapter(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// Address property
    #[zbus(property)]
    fn address(&self) -> zbus::Result<String>;

    /// AddressType property
    #[zbus(property)]
    fn address_type(&self) -> zbus::Result<String>;

    /// Alias property
    #[zbus(property)]
    fn alias(&self) -> zbus::Result<String>;
    #[zbus(property)]
    fn set_alias(&self, value: &str) -> zbus::Result<()>;

    /// Appearance property
    #[zbus(property)]
    fn appearance(&self) -> zbus::Result<u16>;

    /// Blocked property
    #[zbus(property)]
    fn blocked(&self) -> zbus::Result<bool>;
    #[zbus(property)]
    fn set_blocked(&self, value: bool) -> zbus::Result<()>;

    /// Bonded property
    #[zbus(property)]
    fn bonded(&self) -> zbus::Result<bool>;

    /// Class property
    #[zbus(property)]
    fn class(&self) -> zbus::Result<u32>;

    /// Connected property
    #[zbus(property)]
    fn connected(&self) -> zbus::Result<bool>;

    /// Icon property
    #[zbus(property)]
    fn icon(&self) -> zbus::Result<String>;

    /// LegacyPairing property
    #[zbus(property)]
    fn legacy_pairing(&self) -> zbus::Result<bool>;

    /// ManufacturerData property
    #[zbus(property)]
    fn manufacturer_data(
        &self,
    ) -> zbus::Result<std::collections::HashMap<u16, zbus::zvariant::OwnedValue>>;

    /// Modalias property
    #[zbus(property)]
    fn modalias(&self) -> zbus::Result<String>;

    /// Name property
    #[zbus(property)]
    fn name(&self) -> zbus::Result<String>;

    /// Paired property
    #[zbus(property)]
    fn paired(&self) -> zbus::Result<bool>;

    /// RSSI property
    #[zbus(property, name = "RSSI")]
    fn rssi(&self) -> zbus::Result<i16>;

    /// ServiceData property
    #[zbus(property)]
    fn service_data(
        &self,
    ) -> zbus::Result<std::collections::HashMap<String, zbus::zvariant::OwnedValue>>;

    /// ServicesResolved property
    #[zbus(property)]
    fn services_resolved(&self) -> zbus::Result<bool>;

    /// Trusted property
    #[zbus(property)]
    fn trusted(&self) -> zbus::Result<bool>;
    #[zbus(property)]
    fn set_trusted(&self, value: bool) -> zbus::Result<()>;

    /// TxPower property
    #[zbus(property)]
    fn tx_power(&self) -> zbus::Result<i16>;

    /// UUIDs property
    #[zbus(property, name = "UUIDs")]
    fn uuids(&self) -> zbus::Result<Vec<String>>;

    /// WakeAllowed property
    #[zbus(property)]
    fn wake_allowed(&self) -> zbus::Result<bool>;
    #[zbus(property)]
    fn set_wake_allowed(&self, value: bool) -> zbus::Result<()>;
}

/// Builds a proxy to a Bluetooth device using the provided D-Bus connection and device path.
///
/// This asynchronous function constructs and returns a [Device1Proxy] for the specified Bluetooth device.
/// It handles errors at each step of the proxy-building process, logging error messages and returning a failure if any part fails.
///
/// # Arguments
///
/// * cn - A reference to an established [zbus::Connection] to the D-Bus session or system bus.
/// * device_path - The object path of the Bluetooth device to proxy, as a string slice.
///
/// # Returns
///
/// Returns a [Result] containing a [Device1Proxy] on success, or an error if the proxy could not be built.
///
/// # Errors
///
/// This function will return an error if:
/// - The proxy builder could not be created (e.g., invalid connection).
/// - The device path is invalid or cannot be set.
/// - The proxy fails to build asynchronously.
///
/// Error details are logged to standard error output.
///
/// # Examples
///
/// ```ignore
/// use zbus::Connection;
///
/// async fn example() -> Result<(), Box<dyn std::error::Error>> {
///     let cn = Connection::system().await?;
///     let device_path = "/org/bluez/hci0/dev_XX_XX_XX_XX_XX_XX";
///     let proxy = build_device_proxy(&cn, device_path).await?;
///     Ok(())
/// }
/// ```
///
/// # Async
///
/// This function is asynchronous and must be .awaited.
///
pub async fn build_device_proxy<'a>(
    cn: &zbus::Connection,
    device_path: &'a str,
) -> Result<Device1Proxy<'a>, ProxyError> {
    let proxy = match Device1Proxy::builder(&cn).destination("org.bluez") {
        Ok(builder) => builder,
        Err(e) => {
            error!("failed to create proxy builder: {}", e);
            return Err(ProxyError::BuildDeviceProxyFailed(format!("{}", e)));
        }
    };

    let proxy_build = match proxy.path(device_path) {
        Ok(builder) => builder,
        Err(e) => {
            error!("failed to set proxy path: {}", e);
            return Err(ProxyError::SetDeviceProxyPathFailed(format!("{}", e)));
        }
    };
    match proxy_build.build().await {
        Ok(builder) => Ok(builder),
        Err(e) => {
            error!("failed to build proxy from builder: {}", e);
            return Err(ProxyError::BuildDeviceProxyFailed(format!("{}", e)));
        }
    }
}
